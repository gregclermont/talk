                explorer la
hiérarchie des classes et modules principaux
                 de Ruby
                 avec dot

.superclass

Ruby Core :

http://daniel.fone.net.nz/blog/2013/05/27/generating-a-class-hierarchy-in-ruby/

https://h3rald.com/ruby-compendium/book/core-stdlib.html
"Ruby always loads its core classes and modules when a script is executed"

http://words.steveklabnik.com/beware-subclassing-ruby-core-classes
Ruby has two major bits of code that it provides for your use: the core library and the standard library. The core library can be found here, and contains cllasses that you know and love, like String, Hash, and Array. The standard library can be found here, and contains your favorite hits, like CSV, JSON, and Logger.

core is written in C[1], while the standard library is written in Ruby

http://ruby-doc.org/core-2.2.0/BasicObject.html

superclass vs included_modules



https://github.com/ruby/ruby/blob/c8b3f1b470e343e7408ab5883f046b1056d94ccc/doc/syntax/modules_and_classes.rdoc



Object.constants.map{|c| o = Object.const_get(c); s = ((o.methods(false) rescue []).map{|m| o.method(m)} + (o.instance_methods(false) rescue []).map{|m| o.instance_method(m)}).map(&:source_location).compact.map(&:first).uniq; [c, s, o.instance_of?(Class), o.instance_of?(Module)] }




[1] mostly
certains module sont au moins partiellement implémentés en Ruby :

Object.constants.map{|c| o = Object.const_get(c); s = ((o.methods(false) rescue []).map{|m| o.method(m)} + (o.instance_methods(false) rescue []).map{|m| o.instance_method(m)}).map(&:source_location).compact.map(&:first).uniq; [c, s, o.instance_of?(Class), o.instance_of?(Module)] }.find_all{|n, s, c, m| s.any? }.map{|x| x.first(2)}

https://gist.github.com/wtaysom/1236979
